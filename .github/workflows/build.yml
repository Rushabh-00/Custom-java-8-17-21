name: Build Custom Server JREs from Local Patches

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        version: [8, 17, 21]
        arch: ["aarch32", "aarch64"]
      fail-fast: false

    name: "Build Java ${{ matrix.version }} for Android ${{matrix.arch}}"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Your Repository (with patches)
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo apt-get autoremove -y
          sudo apt-get clean

      - name: Set up Boot JDK for Java 8
        if: matrix.version == 8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: temurin

      - name: Set up Boot JDK for Java 17
        if: matrix.version == 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Set up Boot JDK for Java 21
        if: matrix.version == 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Install All Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install autoconf build-essential git python3 python-is-python3 unzip zip systemtap-sdt-dev gcc-multilib g++-multilib libxtst-dev libelf-dev libfontconfig1-dev libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev libcups2-dev libasound2-dev libfreetype6-dev

      - name: Download and Set up Android NDK r28c
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r28c-linux.zip
          unzip -q android-ndk-r28c-linux.zip
          echo "NDK_PATH=$GITHUB_WORKSPACE/android-ndk-r28c" >> $GITHUB_ENV

      - name: Build the Patched JRE
        run: |
          export TARGET_VERSION=${{ matrix.version }}
          bash "build_${{ matrix.arch }}.sh"
        env:
          NDK_PATH: ${{ env.NDK_PATH }}

      - name: Upload JRE artifact on success
        if: success() # Only run this if the build was successful
        uses: actions/upload-artifact@v4
        with:
          name: "jre-${{ matrix.version }}-${{ matrix.arch }}"
          path: jre*.tar.xz

      # --- THIS IS THE NEW, CRITICAL STEP FOR DEBUGGING ---
      - name: Upload config.log on failure
        if: failure() # This step ONLY runs if the build step above fails
        uses: actions/upload-artifact@v4
        with:
          name: "ERROR-LOG-java${{ matrix.version }}-${{ matrix.arch }}"
          # The config.log file is located inside the openjdk source directory
          path: openjdk/config.log
          retention-days: 7 # Keep the error log for 7 days
      # --- END OF NEW STEP ---

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all JRE artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Rename and prepare artifacts
        run: |
          mkdir release-assets
          # Find and move files, ignoring errors if an artifact doesn't exist (due to a failed build)
          find artifacts/jre-8-aarch32 -name "*.tar.xz" -exec mv {} release-assets/8-arm32.tar.xz \; || echo "Java 8 aarch32 artifact not found."
          find artifacts/jre-8-aarch64 -name "*.tar.xz" -exec mv {} release-assets/8-arm64.tar.xz \; || echo "Java 8 aarch64 artifact not found."
          find artifacts/jre-17-aarch32 -name "*.tar.xz" -exec mv {} release-assets/17-arm32.tar.xz \; || echo "Java 17 aarch32 artifact not found."
          find artifacts/jre-17-aarch64 -name "*.tar.xz" -exec mv {} release-assets/17-arm64.tar.xz \; || echo "Java 17 aarch64 artifact not found."
          find artifacts/jre-21-aarch32 -name "*.tar.xz" -exec mv {} release-assets/21-arm32.tar.xz \; || echo "Java 21 aarch32 artifact not found."
          find artifacts/jre-21-aarch64 -name "*.tar.xz" -exec mv {} release-assets/21-arm64.tar.xz \; || echo "Java 21 aarch64 artifact not found."
          
          echo "Prepared release assets:"
          ls -l release-assets

      - name: Upload to GitHub Release
        if: success() && steps.rename.outputs.files_found > 0 # Only release if there are files to upload
        uses: svenstaro/upload-release-action@v2
        with:
          repository: ${{ github.repository }}
          tag: custom-server-jres
          release_name: "Custom Server JREs"
          body: "JREs 8, 17, and 21 for arm32 and arm64, built with local patches for server use on Android."
          overwrite: true
          file: release-assets/*.tar.xz
          file_glob: true
