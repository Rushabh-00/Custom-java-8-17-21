name: Build Custom Server JREs from Local Patches

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        version: [8, 17, 21]
        arch: ["aarch32", "aarch64"]
      fail-fast: false

    name: "Build Java ${{ matrix.version }} for Android ${{matrix.arch}}"
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Your Repository (with patches)
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Set up Boot JDK (Java 17)
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install autoconf build-essential git ccache python3 python-is-python3 unzip zip systemtap-sdt-dev gcc-multilib g++-multilib libxtst-dev libasound2-dev libelf-dev libfontconfig1-dev libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev

      - name: Download and Set up Android NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          unzip -q android-ndk-r25c-linux.zip
          echo "NDK_PATH=$GITHUB_WORKSPACE/android-ndk-r25c" >> $GITHUB_ENV

      - name: Download Correct OpenJDK Source and Apply Patches
        run: |
          # Use a case statement to handle each version specifically
          case "${{ matrix.version }}" in
            "8")
              echo "Cloning specific commit for OpenJDK 8..."
              git clone https://github.com/openjdk/jdk8u.git openjdk
              cd openjdk
              # This is the exact commit the patches are designed for
              git checkout 82228ff352934a3692a8523c95f19e24806a43d7
              echo "Applying Java 8 patches..."
              git apply ../patches/Jre_8/*.diff
              ;;
            "17")
              echo "Cloning specific commit for OpenJDK 17..."
              git clone https://github.com/openjdk/jdk17u.git openjdk
              cd openjdk
              # This is the exact commit the patches are designed for
              git checkout 198533842880ba375837651c10d7a0c4fce4627d
              echo "Applying Java 17 patches..."
              git apply ../patches/Jre_17/*.diff
              ;;
            "21")
              echo "Cloning specific commit for OpenJDK 21..."
              git clone https://github.com/openjdk/jdk21u.git openjdk
              cd openjdk
              # This is the exact commit the patches are designed for
              git checkout 80d854203735998de42c38b2513f1dcb75f7e347
              echo "Applying Java 21 patches..."
              git apply ../patches/Jre_21/*.diff
              ;;
          esac

      - name: Configure and Build
        run: |
          cd openjdk # Move into the patched source directory
          
          # Use a case statement for architecture-specific configure flags
          case "${{ matrix.arch }}" in
            "aarch32")
              bash ./configure \
                --openjdk-target=arm-linux-androideabi \
                --with-jvm-variants=server \
                --with-boot-jdk=$JAVA_HOME \
                --with-toolchain-type=gcc \
                --with-extra-cflags="-fPIC -Wno-error -mfloat-abi=softfp -mfpu=vfp" \
                --with-extra-cxxflags="-fPIC -Wno-error -mfloat-abi=softfp -mfpu=vfp" \
                --with-extra-ldflags="-Wl,-rpath-link=$JAVA_HOME/jre/lib/arm" \
                --with-ndk=$NDK_PATH
              ;;
            "aarch64")
              bash ./configure \
                --openjdk-target=aarch64-linux-androideabi \
                --with-jvm-variants=server \
                --with-boot-jdk=$JAVA_HOME \
                --with-toolchain-type=gcc \
                --with-extra-cflags="-fPIC -Wno-error" \
                --with-extra-cxxflags="-fPIC -Wno-error" \
                --with-extra-ldflags="-Wl,-rpath-link=$JAVA_HOME/jre/lib/aarch64" \
                --with-ndk=$NDK_PATH
              ;;
          esac
          
          # Run the build
          make images

      - name: Package the JRE
        run: |
          cd openjdk
          # Determine the correct output path
          if [[ "${{ matrix.arch }}" == "aarch32" ]]; then
            cd build/linux-arm-release/images
          else
            cd build/linux-aarch64-release/images
          fi
          
          JRE_FOLDER_NAME=$(find . -type d -name "jre*" | head -n 1)
          tar -cJf ../../../../jre-${{ matrix.version }}-${{ matrix.arch }}.tar.xz $JRE_FOLDER_NAME

      - name: Upload JRE artifact
        uses: actions/upload-artifact@v4
        with:
          name: "jre-${{ matrix.version }}-${{ matrix.arch }}"
          path: "jre-*.tar.xz"

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download all JRE artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Rename and prepare artifacts
        run: |
          mkdir release-assets
          find artifacts/jre-8-aarch32 -name "*.tar.xz" -exec mv {} release-assets/8-arm32.tar.xz \;
          find artifacts/jre-8-aarch64 -name "*.tar.xz" -exec mv {} release-assets/8-arm64.tar.xz \;
          find artifacts/jre-17-aarch32 -name "*.tar.xz" -exec mv {} release-assets/17-arm32.tar.xz \;
          find artifacts/jre-17-aarch64 -name "*.tar.xz" -exec mv {} release-assets/17-arm64.tar.xz \;
          find artifacts/jre-21-aarch32 -name "*.tar.xz" -exec mv {} release-assets/21-arm32.tar.xz \;
          find artifacts/jre-21-aarch64 -name "*.tar.xz" -exec mv {} release-assets/21-arm64.tar.xz \;
          ls -l release-assets

      - name: Upload to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repository: ${{ github.repository }}
          tag: custom-server-jres
          release_name: "Custom Server JREs"
          body: "JREs 8, 17, and 21 for arm32 and arm64, built with local patches for headless server use on Android."
          overwrite: true
          file: release-assets/*.tar.xz
          file_glob: true
